library(tidyverse)
library(here)
# load data
df <- read.dta(here("R","CK94","public.dat"))
library(foreign)
# load data
df <- read.dta(here("R","CK94","public.dat"))
# load data
df <- read_dta(here("R","CK94","public.dat"))
library(haven)
# load data
df <- read_dta(here("R","CK94","public.dat"))
here("R","CK94","public.dat")
# load data
df <- read.table(here("R","CK94","public.dat"))
View(df)
# Read codebook
codebook <- read_lines(file = paste0(here("R", "CK94" "codebook"))
here("R", "CK94" "codebook")
# Read codebook
codebook <- read_lines(file = paste0(here("R", "CK94", "codebook"))
)
codebook
# Generate a vector with variable names
variable_names <- codebook %>%
`[`(8:59) %>% # Variablennamen starten bei Element 8 (sheet)
`[`(-c(5, 6, 13, 14, 32, 33)) %>% # Elemente ohne Variablennamen entfernen
str_sub(1, 8) %>% # l채ngster Variablenname enth채lt 8 Zeichen
str_squish() %>% # Whitespaces entfernen
str_to_lower() # nur Kleinbuchstaben verwenden
variable_names
variable_labels
# Generate a vector with variable labels
variable_labels <- codebook %>%
`[`(8:59) %>% # variable names start at element 8 (sheet)
`[`(-c(5, 6, 13, 14, 32, 33)) %>% # remove elements w/o variable names
sub(".*\\.[0-9]", "", .) %>%
`[`(-c(5:10))  %>% # these elements are combined later on
str_squish() # remove white spaces
variable_labels
# Generate a vector with variable names
variable_names <- codebook %>%
`[`(8:59) %>% # Variablennamen starten bei Element 8 (sheet)
`[`(-c(5, 6, 13, 14, 32, 33)) %>% # Elemente ohne Variablennamen entfernen
str_sub(1, 8) %>% # l채ngster Variablenname enth채lt 8 Zeichen
str_squish() %>% # Whitespaces entfernen
str_to_lower() # nur Kleinbuchstaben verwenden
variable_names
variable_labels
# Region
variable_labels[41] <- "region of restaurant"
# Read raw data
data_raw <- read_table2(paste0(tdir_path, "/public.dat"),
col_names = FALSE)
# Read raw data
data_raw <- read_table2(here("R","CK94","public.dat"),
col_names = FALSE)
data_raw
variable_names
# get the important variables names from codebook
df <- df %>% rename(., variable.names)
# get the important variables names from codebook
df <- df %>% rename(., variable_names)
?
rename_with
# get the important variables names from codebook
df <- df %>% rename_with(.cols = everything(), variable_names)
# get the important variables names from codebook
df <- df %>% rename_with(variable_names)
# get the important variables names from codebook
df <- df %>% rename_all(variable_names)
variable_names
# get the important variables names from codebook
df <- df %>% rename_all(~variable_names)
# get the important variables names from codebook
df <- df %>% rename_with(~variable_names)
df
# get the important variables names from codebook
df <- data_raw %>% rename_with(~variable_names)
data_raw %>% rename_with(~variable_names)
data_raw
View(data_raw)
# Read raw data
data_raw <- read.table(here("R","CK94","public.dat"))
# get the important variables names from codebook
df <- data_raw %>% rename_with(~variable_names)
View(df)
#descriptive statistics
card_krueger_1994_mod %>%
select(chain, state) %>%
table() %>%
prop.table(margin = 2)  %>%
apply(MARGIN = 2,
FUN = scales::percent_format(accuracy = 0.1)) %>%
noquote
#descriptive statistics
df %>%
select(chain, state) %>%
table() %>%
prop.table(margin = 2)  %>%
apply(MARGIN = 2,
FUN = scales::percent_format(accuracy = 0.1)) %>%
noquote
df %>%
filter(observation == "February 1992") %>%
group_by(state) %>%
summarise(emptot = mean(emptot, na.rm = TRUE),
pct_fte  = mean(pct_fte, na.rm = TRUE),
wage_st = mean(wage_st, na.rm = TRUE),
hrsopen = mean(hrsopen, na.rm = TRUE)) %>%
pivot_longer(cols=-state, names_to = "variable") %>%
pivot_wider(names_from = state, values_from = value)
df %>%
filter(observation == "February 1992") %>%
group_by(state) %>%
summarise(emptot = mean(emptot, na.rm = TRUE),
pct_fte  = mean(pct_fte, na.rm = TRUE),
wage_st = mean(wage_st, na.rm = TRUE),
hrsopen = mean(hrsopen, na.rm = TRUE)) %>%
pivot_longer(cols=-state, names_to = "variable") %>%
pivot_wider(names_from = state, values_from = value)
# Process data (currently wide format)
data_mod <- data_mod %>%
# chain value label
mutate(chain = case_when(chain == 1 ~ "bk",
chain == 2 ~ "kfc",
chain == 3 ~ "roys",
chain == 4 ~ "wendys")) %>%
# state value label
mutate(state = case_when(state == 1 ~ "New Jersey",
state == 0 ~ "Pennsylvania")) %>%
# Region dummy
mutate(region = case_when(southj == 1 ~ "southj",
centralj == 1 ~ "centralj",
northj == 1 ~ "northj",
shore == 1 ~ "shorej",
pa1 == 1 ~ "phillypa",
pa2 == 1 ~ "eastonpa")) %>%
# meals value label
mutate(meals = case_when(meals == 0 ~ "none",
meals == 1 ~ "free meals",
meals == 2 ~ "reduced price meals",
meals == 3 ~ "both free and reduced price meals")) %>%
# meals value label
mutate(meals2 = case_when(meals2 == 0 ~ "none",
meals2 == 1 ~ "free meals",
meals2 == 2 ~ "reduced price meals",
meals2 == 3 ~ "both free and reduced price meals")) %>%
# status2 value label
mutate(status2 = case_when(status2 == 0 ~ "refused second interview",
status2 == 1 ~ "answered 2nd interview",
status2 == 2 ~ "closed for renovations",
status2 == 3 ~ "closed permanently",
status2 == 4 ~ "closed for highway construction",
status2 == 5 ~ "closed due to Mall fire")) %>%
mutate(co_owned = if_else(co_owned == 1, "yes", "no")) %>%
mutate(bonus = if_else(bonus == 1, "yes", "no")) %>%
mutate(special2 = if_else(special2 == 1, "yes", "no")) %>%
mutate(type2 = if_else(type2 == 1, "phone", "personal")) %>%
select(-southj, -centralj, -northj, -shore, -pa1, -pa2) %>% # now included in region dummy
mutate(date2 = lubridate::mdy(date2)) %>% # Convert date
rename(open2 = open2r) %>% #Fit name to wave 1
rename(firstinc2 = firstin2) %>% # Fit name to wave 1
sjlabelled::set_label(variable_labels) # Add stored variable labels
# Add variable names
data_mod <- data_raw %>%
select(-X47) %>% # remove empty column
`colnames<-`(., variable_names) %>% # Assign variable names
mutate_all(as.numeric) %>% # treat all variables as numeric
mutate(sheet = ifelse(sheet == 407 & chain == 4, 408, sheet)) # duplicated sheet id 407
# Add variable names
data_mod <- data_raw %>%
`colnames<-`(., variable_names) %>% # Assign variable names
mutate_all(as.numeric) %>% # treat all variables as numeric
mutate(sheet = ifelse(sheet == 407 & chain == 4, 408, sheet)) # duplicated sheet id 407
# Process data (currently wide format)
data_mod <- data_mod %>%
# chain value label
mutate(chain = case_when(chain == 1 ~ "bk",
chain == 2 ~ "kfc",
chain == 3 ~ "roys",
chain == 4 ~ "wendys")) %>%
# state value label
mutate(state = case_when(state == 1 ~ "New Jersey",
state == 0 ~ "Pennsylvania")) %>%
# Region dummy
mutate(region = case_when(southj == 1 ~ "southj",
centralj == 1 ~ "centralj",
northj == 1 ~ "northj",
shore == 1 ~ "shorej",
pa1 == 1 ~ "phillypa",
pa2 == 1 ~ "eastonpa")) %>%
# meals value label
mutate(meals = case_when(meals == 0 ~ "none",
meals == 1 ~ "free meals",
meals == 2 ~ "reduced price meals",
meals == 3 ~ "both free and reduced price meals")) %>%
# meals value label
mutate(meals2 = case_when(meals2 == 0 ~ "none",
meals2 == 1 ~ "free meals",
meals2 == 2 ~ "reduced price meals",
meals2 == 3 ~ "both free and reduced price meals")) %>%
# status2 value label
mutate(status2 = case_when(status2 == 0 ~ "refused second interview",
status2 == 1 ~ "answered 2nd interview",
status2 == 2 ~ "closed for renovations",
status2 == 3 ~ "closed permanently",
status2 == 4 ~ "closed for highway construction",
status2 == 5 ~ "closed due to Mall fire")) %>%
mutate(co_owned = if_else(co_owned == 1, "yes", "no")) %>%
mutate(bonus = if_else(bonus == 1, "yes", "no")) %>%
mutate(special2 = if_else(special2 == 1, "yes", "no")) %>%
mutate(type2 = if_else(type2 == 1, "phone", "personal")) %>%
select(-southj, -centralj, -northj, -shore, -pa1, -pa2) %>% # now included in region dummy
mutate(date2 = lubridate::mdy(date2)) %>% # Convert date
rename(open2 = open2r) %>% #Fit name to wave 1
rename(firstinc2 = firstin2) %>% # Fit name to wave 1
sjlabelled::set_label(variable_labels) # Add stored variable labels
data_mod
# Structural variables
structure <- data_mod %>%
select(sheet, chain, co_owned, state, region)
# Wave 1 variables
wave1 <- data_mod %>%
select(-ends_with("2"), - names(structure)) %>%
mutate(observation = "February 1992") %>%
bind_cols(structure)
# Wave 2 variables
wave2 <- data_mod %>%
select(ends_with("2")) %>%
rename_all(~str_remove(., "2"))  %>%
mutate(observation = "November 1992") %>%
bind_cols(structure)
# Final dataset
card_krueger_1994 <- bind_rows(wave1, wave2) %>%
select(sort(names(.))) %>% # Sort columns alphabetically
sjlabelled::copy_labels(data_mod) # Restore variable labels
card_krueger_1994
# Final dataset
card_krueger_1994 <- bind_rows(wave1, wave2) %>%
select(sort(names(.))) %>% # Sort columns alphabetically
sjlabelled::copy_labels(data_mod) %>% # Restore variable labels
as_tibble()
card_krueger_1994
View(card_krueger_1994)
# According to the paper, the full-time equivalents (FTE) consist of full-time employees, managers and part-time employees (emptot). The latter are multiplied by factor 0.5 before entering the calculation. Also, I am generating the share of full-time employees of all FTE (pct_ftw).
card_krueger_1994_mod <- card_krueger_1994 %>%
mutate(emptot = empft + nmgrs + 0.5 * emppt,
pct_fte = empft / emptot * 100)
card_krueger_1994_mod
#descriptive statistics
card_krueger_1994_mod %>%
select(chain, state) %>%
table() %>%
prop.table(margin = 2)  %>%
apply(MARGIN = 2,
FUN = scales::percent_format(accuracy = 0.1)) %>%
noquote
card_krueger_1994_mod %>%
filter(observation == "February 1992") %>%
group_by(state) %>%
summarise(emptot = mean(emptot, na.rm = TRUE),
pct_fte  = mean(pct_fte, na.rm = TRUE),
wage_st = mean(wage_st, na.rm = TRUE),
hrsopen = mean(hrsopen, na.rm = TRUE)) %>%
pivot_longer(cols=-state, names_to = "variable") %>%
pivot_wider(names_from = state, values_from = value)
card_krueger_1994_mod %>%
filter(observation == "November 1992") %>%
group_by(state) %>%
summarise(emptot = mean(emptot, na.rm = TRUE),
pct_fte  = mean(pct_fte, na.rm = TRUE),
wage_st = mean(wage_st, na.rm = TRUE),
hrsopen = mean(hrsopen, na.rm = TRUE)) %>%
pivot_longer(cols=-state, names_to = "variable") %>%
pivot_wider(names_from = state, values_from = value)
# Reproducing Figure 1
hist.feb <- card_krueger_1994_mod %>%
filter(observation == "February 1992") %>%
ggplot(aes(wage_st, fill = state)) +
geom_histogram(aes(y=c(..count..[..group..==1]/sum(..count..[..group..==1]),
..count..[..group..==2]/sum(..count..[..group..==2]))*100),
alpha=0.5, position = "dodge", bins = 23) +
labs(title = "February 1992", x = "Wage range", y = "Percent of stores", fill = "") +
scale_fill_grey()
hist.nov <- card_krueger_1994_mod %>%
filter(observation == "November 1992") %>%
ggplot(aes(wage_st, fill = state)) +
geom_histogram(aes(y=c(..count..[..group..==1]/sum(..count..[..group..==1]),
..count..[..group..==2]/sum(..count..[..group..==2]))*100),
alpha = 0.5, position = "dodge", bins = 23) +
labs(title = "November 1992", x="Wage range", y = "Percent of stores", fill="") +
scale_fill_grey()
ggarrange(hist.feb, hist.nov, ncol = 2,
common.legend = TRUE, legend = "bottom")
ggpubr::ggarrange(hist.feb, hist.nov, ncol = 2,
common.legend = TRUE, legend = "bottom")
cowplot::plot_grid(hist.feb, hist.nov, ncol = 2,
common.legend = TRUE, legend = "bottom")
ggpubr::ggarrange(hist.feb, hist.nov, ncol = 2,
common.legend = TRUE, legend = "bottom")
hist.nov
hist.nov$scales
ggplot_build(hist.nov)
ggplot_build(hist.nov)$panel$ranges[[1]]$y.range
ggplot_build(hist.nov)$layout$panel_ranges[[1]]$y.range
ggplot_build(hist.nov)$layout$panel_scales_y[[1]]$range$range
# make axis equal
hist.feb <- hist.feb + coord_cartesian(ylim = ggplot_build(hist.nov)$layout$panel_scales_y[[1]]$range$range)
ggpubr::ggarrange(hist.feb, hist.nov, ncol = 2,
common.legend = TRUE, legend = "bottom")
hist.nov <- card_krueger_1994_mod %>%
filter(observation == "November 1992") %>%
ggplot(aes(wage_st, fill = state)) +
geom_histogram(aes(y=c(..count..[..group..==1]/sum(..count..[..group..==1]),
..count..[..group..==2]/sum(..count..[..group..==2]))*100),
alpha = 0.5, position = "dodge", bins = 23) +
labs(title = "November 1992", x="Wage range", y = "Percent of stores", fill="") +
scale_fill_grey() +
ylab()
hist.nov <- card_krueger_1994_mod %>%
filter(observation == "November 1992") %>%
ggplot(aes(wage_st, fill = state)) +
geom_histogram(aes(y=c(..count..[..group..==1]/sum(..count..[..group..==1]),
..count..[..group..==2]/sum(..count..[..group..==2]))*100),
alpha = 0.5, position = "dodge", bins = 23) +
labs(title = "November 1992", x="Wage range", y = "Percent of stores", fill="") +
scale_fill_grey() +
ylab("")
ggpubr::ggarrange(hist.feb, hist.nov, ncol = 2,
common.legend = TRUE, legend = "bottom")
summary(did_model)
did_model <- lm(emptot ~ time + treated + time:treated, data = card_krueger_1994_mod)
# did estimation
card_krueger_1994_mod <- mutate(card_krueger_1994_mod,
time = ifelse(observation == "November 1992", 1, 0),
treated = ifelse(state == "New Jersey", 1, 0)
)
did_model <- lm(emptot ~ time + treated + time:treated, data = card_krueger_1994_mod)
summary(did_model)
lmtest::coeftest(vcovHAC(did_model))
lmtest::coeftest(did_model, vcov = vcovHAC(did_model))
lmtest::coeftest(did_model, vcov = sandwich::vcovHAC(did_model))
lmtest::coeftest(did_model, vcov = sandwich::vcovHC(did_model))
lmtest::coeftest(did_model, vcov = sandwich::NeweyWest(did_model))
# run estimation with OLS
did_model <- lm(emptot ~ time + treated + time:treated, data = card_krueger_1994_mod)
summary(did_model)
# getting heteroskedasticity and auto-correlation robust standard errors as suggested by Newey & West 1987
lmtest::coeftest(did_model, vcov = sandwich::NeweyWest(did_model))
# Reproducing Figure 1
hist.feb <- card_krueger_1994_mod %>%
filter(observation == "February 1992") %>%
ggplot(aes(wage_st, fill = state)) +
geom_histogram(aes(y=c(..count..[..group..==1]/sum(..count..[..group..==1]),
..count..[..group..==2]/sum(..count..[..group..==2]))*100),
alpha=0.5, position = "dodge", bins = 23) +
labs(title = "February 1992", x = "Wage range", y = "Percent of stores", fill = "") +
scale_fill_grey() + theme_minimal()
hist.nov <- card_krueger_1994_mod %>%
filter(observation == "November 1992") %>%
ggplot(aes(wage_st, fill = state)) +
geom_histogram(aes(y=c(..count..[..group..==1]/sum(..count..[..group..==1]),
..count..[..group..==2]/sum(..count..[..group..==2]))*100),
alpha = 0.5, position = "dodge", bins = 23) +
labs(title = "November 1992", x="Wage range", y = "Percent of stores", fill="") +
scale_fill_grey() +  theme_minimal() +
ylab("")
# make axis equal
hist.feb <- hist.feb + coord_cartesian(ylim = ggplot_build(hist.nov)$layout$panel_scales_y[[1]]$range$range)
ggpubr::ggarrange(hist.feb, hist.nov, ncol = 2,
common.legend = TRUE, legend = "bottom")
library(tidyverse)
library(haven)
library(lmtest)
library(sandwich)
library(plm)
smoke <- read_dta(here("BN05", "Binder Smoke.dta"))
smoke <- read_dta(here("R", "BN05", "Binder Smoke.dta"))
so2 <- read_dta(here("R", "BN05", "Binder SO2.dta"))
spm <- read_dta(here("R", "BN05", "Binder spm.dta"))
mod1 <- lm(lnso2med ~ lnengopc + lnenergy + lngdp + lngdpsq + polity + lnliter + area + indust + residential + lndens + cencity + coast + as.factor(year), data=so2)
summary(mod1, vcov = vcovHC(mod1,"HC1"))
mod2 <- plm(lnso2med ~ lnengopc + lnenergy + lngdp + lngdpsq + polity + lnliter + area + indust + residential + lndens + cencity + coast + as.factor(year), index = c("ctrcode"), effect = "individual" , model = "fixed", data = so2)
mod2 <- plm(lnso2med ~ lnengopc + lnenergy + lngdp + lngdpsq + polity + lnliter + area + indust + residential + lndens + cencity + coast + as.factor(year), index = c("ctrcode"), effect = "individual" , model = "within", data = so2)
summary(mod2, vcov=vcovHC(mod2,method = "arellano"))
summary(mod1, vcov = vcovHC(mod1,"HC1"))
summary(mod2, vcov=vcovHC(mod2,method = "arellano"))
mod2 <- plm(lnso2med ~ lnengopc + lnenergy + lngdp + lngdpsq + polity + lnliter + area + indust + residential + lndens + cencity + coast + as.factor(year), index = c("ctrcode"), effect = "individual" , model = "random", data = so2)
summary(mod2, vcov=vcovHC(mod2,method = "arellano"))
mod2 <- plm(lnso2med ~ lnengopc + lnenergy + lngdp + lngdpsq + polity + lnliter + area + indust + residential + lndens + cencity + coast + as.factor(year), index = c("ctrcode"), effect = "twoway" , model = "random", data = so2)
summary(mod2, vcov=vcovHC(mod2,method = "arellano"))
mod2 <- plm(lnso2med ~ lnengopc + lnenergy + lngdp + lngdpsq + polity + lnliter + area + indust + residential + lndens + cencity + coast , index = c("ctrcode"), effect = "twoway" , model = "random", data = so2)
summary(mod2, vcov=vcovHC(mod2,method = "arellano"))
mod2 <- plm(lnso2med ~ lnengopc + lnenergy + lngdp + lngdpsq + polity + lnliter + area + indust + residential + lndens + cencity + coast + as.factor(year), index = c("ctrcode"), effect = "individual" , model = "random", data = so2)
summary(mod2, vcov=vcovHC(mod2,method = "arellano"))
summary(mod2, vcov=vcovHC(mod2,method = "arellano"))
summary(mod1, vcov = vcovHC(mod1,"HC1"))
