library(foreign)
library(stats)
library(MarcusSantAnna2020)
library(did)
library(DRDID)
library(haven)
library(dplyr)
library(gridExtra)
library(ggplot2)
library(lfe)
library(fastDummies)
library(panelView)
library(here)
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Set seed
set.seed(1234)
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Set the Working Directory
#address should be the subfolder with the data
address <- here()
setwd(address)
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
nboot = 1000 # Number of bootstrap draws
alp = 0.10 # Significance level
maxe = 19 # Number of post-treatment periods to analyze
mine = -21
#----------------------------------------------------------------------------
###########################################################################
cv.pointwise <-  stats::qnorm(1 - alp/2)
#############################
# Application: Baseline specification (unconditional Event-Study Analysis)
###########################################################################
# Load data
grooms <- haven::read_dta(here("../createddata/grooms_st_2.dta"))
#############################
# Application: Baseline specification (unconditional Event-Study Analysis)
###########################################################################
# Load data
grooms <- haven::read_dta(here("/createddata/grooms_st_2.dta"))
#############################
# Application: Baseline specification (unconditional Event-Study Analysis)
###########################################################################
# Load data
grooms <- haven::read_dta(here("createddata","grooms_st_2.dta"))
# Histogram of Authorization year
hist.auth <- ggplot(grooms[grooms$year==1977 & is.na(grooms$authyear)==F ,],
aes(x = as.factor(authyear))) +
geom_bar() +
labs(title = "", x = "\nYear of State Authorization", y = "Frequency\n") +
theme_minimal() +
theme(axis.title = element_text(size=15))+
theme(axis.text.y = element_text(size = 14, face = "bold"))+
theme(axis.text.x = element_text(size = 14, face = "bold"))
hist.auth
# Drop all units that are "always treated"
grooms <- subset(grooms, (grooms$authyear>=1977) | (is.na(grooms$authyear)==1))
grooms$treat <- 1 - base::is.na(grooms$authyear)
grooms$authyear <- base::ifelse(is.na(grooms$authyear), 0, grooms$authyear)
# Visualize exact treatment timing
year.adoption <- panelView(violrate ~ after,
data = as.data.frame(grooms),
index = c("state_code", "year"), pre.post = T,
by.timing = TRUE,
theme.bw = 1,
xlab = "", ylab = "",
xlim = c(1970,2008),
axis.lab.gap = c(2,0),
cex.main = 20, cex.axis= 28, cex.lab = 16, cex.legend = 30,
main = "",
background = "white",
legend.labs = c("Never-treated",
"Treated (before state authorization)",
"Treated (after state authorization)")
)
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Outcome: Violrate
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Results using  Never treated as control
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Get ATT(g,t)'s
out.never.violrate <- MarcusSantAnna2020::unc_att_gt_panel(y_name ="violrate",
t_name = "year",
id_name = "state",
first_treat_name = "authyear",
#het_name = "corrupt",
weights_name = "totfac",
comparison_group = "never",
data = grooms,
print_details = FALSE,
nboot = nboot,
bstrap = FALSE,
alp = alp)
# Get event-study estimates
ES_aggte <- did::aggte(out.never.violrate, type = "dynamic")
ES_aggte
? MarcusSantAnna2020::unc_att_gt_panel
# Select those with event time within the range we want
e_select <- (ES_aggte$egt >= mine) & ((ES_aggte$egt <= maxe))
egt <- ES_aggte$egt[e_select]
ES_att <- ES_aggte$att.egt[e_select]
ES_inf_function <- ES_aggte$inf.function$dynamic.inf.func.e[, e_select]
ES_inf_function
mine
maxe
egt <- ES_aggte$egt[e_select]
ES_att <- ES_aggte$att.egt[e_select]
ES_inf_function <- ES_aggte$inf.function$dynamic.inf.func.e[, e_select]
# Do the bootstrap
par_boot <-  out.never.violrate$DIDparams
par_boot
bootst_es <- did::mboot(ES_inf_function, par_boot)
bootst_es
#----------------------------------------------------------------------------
# Put all in a data frame
event.study <- cbind.data.frame(year = as.factor(-20:20),
att = ES_att,
att.se = bootst_es$se,
post = as.factor(1),
cv = bootst_es$crit.val,
cv.pointwise = cv.pointwise,
row.names = NULL)
dabreaks <- event.study$year[seq(1, length(event.study$year), 4)]
dabreaks
#----------------------------------------------------------------------------
plot.event.never.violrate <- ggplot2::ggplot(event.study, aes(x=year, y=att, ymin = (att-cv*att.se),
ymax=att+cv*att.se, post=post, group = 1)) +
geom_line(aes(x=year, y=att), size = 1.5, colour = "red4") +
geom_hline(yintercept = 0,colour="black", size = 0.5, linetype = "dashed")+
geom_ribbon(aes(ymin= (att - cv.pointwise*att.se), ymax=  (att+cv.pointwise*att.se)), alpha = 0.4) +
geom_ribbon(aes(ymin=  (att-cv*att.se), ymax =  (att+cv*att.se)), alpha = 0.35)+
theme_minimal()+
xlab("# Periods treated") +
ylab("Event Study ATT") +
theme(axis.title = element_text(color="black",  size=15))+
theme(axis.text.y = element_text(size = 12, face = "bold", color="black"))+
theme(axis.text.x = element_text(size = 12, face = "bold",color="black"))+
scale_y_continuous(limits =c(-0.07,0.05), breaks = seq(-0.07,0.05,0.02)) +
scale_x_discrete(breaks=dabreaks, labels=as.character(dabreaks))+
theme(plot.title = element_text(color="black", face="bold", size = 12))+
#ggtitle("Outcome: Violation rate \nComparison group: Never treated")
ggtitle("(b) Event study using never-treated units as comparison group")
plot.event.never.violrate
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Results using  Not-Yet-treated as control
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
out.ny.violrate <- MarcusSantAnna2020::unc_att_gt_panel(y_name ="violrate",
t_name = "year",
id_name = "state",
first_treat_name = "authyear",
#het_name = "corrupt",
weights_name = "totfac",
comparison_group = "not_yet",
data = grooms,
nboot = nboot,
print_details = FALSE,
bstrap = FALSE,
alp = alp)
# Get event-study estimates
ES_aggte <- did::aggte(out.ny.violrate, type = "dynamic")
# Select those with event time within the range we want
e_select <- (ES_aggte$egt >= mine) & ((ES_aggte$egt <= maxe))
egt <- ES_aggte$egt[e_select]
ES_att <- ES_aggte$att.egt[e_select]
ES_inf_function <- ES_aggte$inf.function$dynamic.inf.func.e[, e_select]
# Do the bootstrap
par_boot <-  out.ny.violrate$DIDparams
bootst_es <- did::mboot(ES_inf_function, par_boot)
#----------------------------------------------------------------------------
# Put all in a data frame
event.study <- cbind.data.frame(year = as.factor(-20:20),
att = ES_att,
att.se = bootst_es$se,
post = as.factor(1),
cv = bootst_es$crit.val,
cv.pointwise = cv.pointwise,
row.names = NULL)
dabreaks <- event.study$year[seq(1, length(event.study$year), 4)]
#----------------------------------------------------------------------------
plot.event.ny.violrate <- ggplot2::ggplot(event.study, aes(x=year, y=att, ymin = (att-cv*att.se),
ymax=att+cv*att.se, post=post, group = 1)) +
geom_line(aes(x=year, y=att), size = 1.5, colour = "red4") +
geom_hline(yintercept = 0,colour="black", size = 0.5, linetype = "dashed")+
#geom_errorbar(aes(colour=post), width=0.1) +
geom_ribbon(aes(ymin= (att - cv.pointwise*att.se), ymax=  (att+cv.pointwise*att.se)), alpha = 0.4) +
geom_ribbon(aes(ymin=  (att-cv*att.se), ymax =  (att+cv*att.se)), alpha = 0.35)+
#geom_ribbon(aes(ymin= (att - cv.pointwise*att.se), ymax=  (att+cv.pointwise*att.se)), alpha = 0.35) +
theme_minimal()+
xlab("# Periods treated") +
ylab("Event Study ATT") +
theme(axis.title = element_text(color="black",  size=15))+
theme(axis.text.y = element_text(size = 12, face = "bold", color="black"))+
theme(axis.text.x = element_text(size = 12, face = "bold",color="black"))+
scale_y_continuous(limits =c(-0.07,0.05), breaks = seq(-0.07,0.05,0.02)) +
scale_x_discrete(breaks=dabreaks, labels=as.character(dabreaks))+
theme(plot.title = element_text(color="black", face="bold", size = 12))+
#ggtitle("Outcome: Violation rate \nComparison group: Not-yet treated")
ggtitle("(c) Event study using not-yet-treated units as comparison group")
plot.event.ny.violrate
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Results using  All not-Yet-treated as control (new estimator from the paper)
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
out.nyall.violrate <- MarcusSantAnna2020::unc_att_gt_panel(y_name ="violrate",
t_name = "year",
id_name = "state",
first_treat_name = "authyear",
#het_name = "corrupt",
weights_name = "totfac",
comparison_group = "not_yet_all",
data = grooms,
nboot = nboot,
print_details = FALSE,
bstrap = FALSE,
alp = alp)
# Get event-study estimates
ES_aggte <- did::aggte(out.nyall.violrate, type = "dynamic")
# Select those with event time within the range we want
e_select <- (ES_aggte$egt >= mine) & ((ES_aggte$egt <= maxe))
egt <- ES_aggte$egt[e_select]
ES_att <- ES_aggte$att.egt[e_select]
ES_inf_function <- ES_aggte$inf.function$dynamic.inf.func.e[, e_select]
# Do the bootstrap
par_boot <-  out.nyall.violrate$DIDparams
bootst_es <- did::mboot(ES_inf_function, par_boot)
#----------------------------------------------------------------------------
# Put all in a data frame
event.study <- cbind.data.frame(year = as.factor(-20:20),
att = ES_att,
att.se = bootst_es$se,
post = as.factor(1),
cv = bootst_es$crit.val,
cv.pointwise = cv.pointwise,
row.names = NULL)
dabreaks <- event.study$year[seq(1, length(event.study$year), 4)]
#----------------------------------------------------------------------------
plot.event.nyall.violrate <- ggplot2::ggplot(event.study, aes(x=year, y=att, ymin = (att-cv*att.se),
ymax=att+cv*att.se, post=post, group = 1)) +
geom_line(aes(x=year, y=att), size = 1.5, colour = "red4") +
geom_hline(yintercept = 0,colour="black", size = 0.5, linetype = "dashed")+
#geom_errorbar(aes(colour=post), width=0.1) +
geom_ribbon(aes(ymin= (att - cv.pointwise*att.se), ymax=  (att+cv.pointwise*att.se)), alpha = 0.4) +
geom_ribbon(aes(ymin=  (att-cv*att.se), ymax =  (att+cv*att.se)), alpha = 0.35)+
#geom_ribbon(aes(ymin= (att - cv.pointwise*att.se), ymax=  (att+cv.pointwise*att.se)), alpha = 0.35) +
theme_minimal()+
xlab("# Periods treated") +
ylab("Event Study ATT") +
theme(axis.title = element_text(color="black",  size=15))+
theme(axis.text.y = element_text(size = 12, face = "bold", color="black"))+
theme(axis.text.x = element_text(size = 12, face = "bold",color="black"))+
scale_y_continuous(limits =c(-0.07,0.05), breaks = seq(-0.07,0.05,0.02)) +
scale_x_discrete(breaks=dabreaks, labels=as.character(dabreaks))+
theme(plot.title = element_text(color="black", face="bold", size = 12))+
#ggtitle("Outcome: Violation rate \nComparison group: Not-yet treated")
ggtitle("(d) Event study using all not-yet-treated units as comparison group")
plot.event.nyall.violrate
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Results based on TWFE specification
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Results using dynamic TWFE (event study)
#----------------------------------------------------------------------------
# Create the treatment leads and lag dummies
taus = fastDummies::dummy_cols(data.frame(tau = grooms$tau))
taus <- taus[paste0("tau_",-32:31)]
# I drop the tau_NA, tau_-1 (baseline) and tau_-32.Dropping two periods avoid problems as pointed out by B&J.
taus = taus[, !(colnames(taus) %in% c("tau", "tau_-1", "tau_NA","tau_-32"))]
# I put _m instead of _- so the formula below doesn't collapse.
colnames(taus)[1:30] <- paste0(rep("tau_m", 30),31:2)
grooms = cbind(grooms, taus)
#----------------------------------------------------------------------------
twfe.violrate.dyn = lfe::felm(as.formula(paste("violrate ~",
paste(colnames(taus), collapse = " + "),
"| (state + year)| 0 | state")),
data = grooms,
exactDOF = F,
weights = grooms$totfac)
#----------------------------------------------------------------------------
# Put all in a data frame
event.study <- cbind.data.frame(year = as.factor(-20:20),
att = c(twfe.violrate.dyn$beta[11:30,],0,twfe.violrate.dyn$beta[31:50,]),
att.se = c(twfe.violrate.dyn$cse[11:30],0,twfe.violrate.dyn$cse[31:50]),
post = as.factor(1),
cv.pointwise = cv.pointwise,
row.names = NULL)
dabreaks <- event.study$year[seq(1, length(event.study$year), 4)]
plot.event.TWFE.violrate <- ggplot2::ggplot(event.study, aes(x=year, y=att,
ymin = (att-cv.pointwise*att.se),
ymax=att+cv.pointwise*att.se, post=post, group = 1)) +
#geom_point(aes(colour=post), size=1.5) +
geom_line(aes(x=year, y=att), size = 1.5, colour = "red4") +
geom_hline(yintercept = 0,colour="black", size = 0.5, linetype = "dashed")+
geom_ribbon(aes(ymin= (att - cv.pointwise*att.se), ymax=  (att+cv.pointwise*att.se)), alpha = 0.4) +
geom_ribbon(aes(ymin= (att - cv.pointwise*att.se), ymax=  (att+cv.pointwise*att.se)), alpha = 0.35) +
theme_minimal()+
xlab("# Periods treated") +
ylab("Event Study ATT") +
theme(axis.title = element_text(color="black",  size=15))+
theme(axis.text.y = element_text(size = 12, face = "bold", color="black"))+
theme(axis.text.x = element_text(size = 12, face = "bold",color="black"))+
scale_y_continuous(limits =c(-0.07,0.05), breaks = seq(-0.07,0.05,0.02)) +
scale_x_discrete(breaks=dabreaks, labels=as.character(dabreaks))+
theme(plot.title = element_text(color="black", face="bold", size = 12))+
#ggtitle("Outcome: Violation rate \nComparison group:  TWFE specification")
ggtitle("(a) Event study based on TWFE specification")
plot.event.TWFE.violrate
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
violrate.plots <- grid.arrange(plot.event.TWFE.violrate,
plot.event.never.violrate,
plot.event.ny.violrate,
plot.event.nyall.violrate,
nrow = 4)
devtools::install_github("jimhester/archive")
library(archive)
temp <- tempfile()
download.file(paste0(https://dataverse.harvard.edu/file.xhtml?persistentId=doi:10.7910/DVN/TXB0ZO/MODUZE&version=1.0), temp)
download.file(paste0("https://dataverse.harvard.edu/file.xhtml?persistentId=doi:10.7910/DVN/TXB0ZO/MODUZE&version=1.0"), temp)
temp
temp <- tempfile()
download.file(paste0("https://dvn-cloud.s3.amazonaws.com/10.7910/DVN/TXB0ZO/1745654c2a0-8792208fb16d?response-content-disposition=attachment%3B%20filename%2A%3DUTF-8%27%27replication_files.rar&response-content-type=application%2Fx-rar-compressed&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20210429T134307Z&X-Amz-SignedHeaders=host&X-Amz-Expires=3600&X-Amz-Credential=AKIAIEJ3NV7UYCSRJC7A%2F20210429%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=40575c122ba081bf4a0babf545b781e99ad428e5d6f30f2fd38d6622f1946992"), temp)
getwd()
setwd("C:\Users\Nils\Desktop")
setwd("C:\\Users\\Nils\\Desktop")
getwd()
#extract RAR to current working directory using p7zip
system(paste("7z x", temp, paste0("-o", getwd())))
paste("7z x", temp, paste0("-o", getwd()))
#extract RAR to current working directory using p7zip
system(paste("7za x", temp, paste0("-o", getwd())))
#extract RAR to current working directory using p7zip
system(paste("7z x", temp, paste0("-o", getwd())))
library(here)
getwd()
temp
#extract RAR to current working directory using p7zip (given you have the 7z.exe path in your PATH)
system(paste("7z x", temp, paste0("-o", getwd())))
library(here)
temp <- tempfile()
getwd()
setwd(C:/Users/Nils/Desktop)
setwd("C:/Users/Nils/Desktop")
getwd()
temp <- tempfile()
download.file(paste0("https://dvn-cloud.s3.amazonaws.com/10.7910/DVN/TXB0ZO/1745654c2a0-8792208fb16d?response-content-disposition=attachment%3B%20filename%2A%3DUTF-8%27%27replication_files.rar&response-content-type=application%2Fx-rar-compressed&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20210429T134307Z&X-Amz-SignedHeaders=host&X-Amz-Expires=3600&X-Amz-Credential=AKIAIEJ3NV7UYCSRJC7A%2F20210429%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=40575c122ba081bf4a0babf545b781e99ad428e5d6f30f2fd38d6622f1946992"), temp)
#extract RAR to current working directory using p7zip (given you have the 7z.exe path in your PATH)
system(paste("7z x", temp, paste0("-o", getwd())))
library(here)
here()
setwd(here())
getwd()
###########################################################################
# Application: Aggregated results; Corrupt vs Not corrupt states.
# Ruling out corruption-specific trends
###########################################################################
###########################################################################
# Load data
grooms <- haven::read_dta(here("../createddata/grooms_st_2.dta"))
###########################################################################
# Application: Aggregated results; Corrupt vs Not corrupt states.
# Ruling out corruption-specific trends
###########################################################################
###########################################################################
# Load data
grooms <- haven::read_dta(here("createddata","grooms_st_2.dta"))
# Drop all units that are "always treated"
grooms <- subset(grooms, (grooms$authyear>=1977) | (is.na(grooms$authyear)==1))
grooms$treat <- 1 - base::is.na(grooms$authyear)
grooms$authyear <- base::ifelse(is.na(grooms$authyear), 0, grooms$authyear)
View(grooms)
